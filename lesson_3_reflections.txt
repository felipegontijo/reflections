When would you want to use a remote repository rather than keeping all your work local?

	I would use a remote repository whenever there were more people other than me contributing to my project.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	Having changes being pulled automatically may compromise an ongoing work. The whole idea behind version control is for one to have control over what is synced, and when it is synced. Doing so automatically may generate confusion, and perhaps cause unwanted behavior.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
	
	Fork copies someone else's repository into your GitHub account. It references back to the original repository and its author. Fork is particularly useful when contributing to someone else's code/project because of its earlier stated characteristics. A fork can be followed by a clone into local, which allows for you to work on the repository and change it up as you'd like.

	Clone is used to simply copy a repository -- either online to local, or local to local.

	Branches are created within the same repository, and are nothing more than a label for a set of commits to come in the same context -- i.e., a new feature, trying out some functionality or improvements, etc. Branches are useful when you don't want to compromise the major branch (master), which is in theory the place for everything to be working properly. Then, creating additional branches are the way to go to test out and implement new features and functionality.

What is the benefit of having a copy of the last known state of the remote stored locally?

	Having a local copy of the last known state of the remote is helpful in because it lets you know if there have been any changes in the remote ever since you last synced, i.e., changes you are "not aware of".
	The local copy is particularly important when working on a project that has other collaborators, because knowing the last known state of the remote will inform you if people have commited things to the remote which you haven't synced into your local yet.
	Additionally, it informs whether you have made local changes/commits that the remote isn't aware of.
	In both cases, having a local copy of the remote's last known state provides you with information on whether there is a need to perform a push or a pull, basically.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	It would be incredibly hard to collaborate without Git or GitHub. Relying on zip files and email hurts only by thinking about it, and I am grateful there is something like Git and GitHub out there.
	The only benefits I can see of not using Git would be not having to learn it at all lol. Other than that, using Git is highly benefitial.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	I would rather make changes in a separate branch when the changes are of a different "context" as the one master branch currently is. This "change of context" can usually mean when you want to add something to the project -- a feature, which builds on what you currently have, but is either non-final (experimental), or a variation of the project, in which you would want the two versions.
	Furthermore, making changes in a separate branch makes collaborating with other people better, as it enhances the readibility of the project as in who is working in what part, and what changes have been made by who. It also enhances the way in which changes/additions are made and also accepted or not with pull requests. It makes feedback easier and assures nothing to be merged into the master without consent.
	Doing everything on master is ok if you're the only one working on the project, and if it is a small or simple project as well. This would reduce the hassle of making everything work, simplifying the whole version control process. However, the cost is usually worth it once different things begin being added to the project, or when you have to collaborate with others.
	Overall, branches make the version control process cleaner and increases its readibility. Although it may inccur in taking into account many things instead of simply pulling and pushing, it increases the probability of a project to work out well, have less bugs, and is a must when collaborating with others. In addition, branches reduce the stakes when changing up a project's features/characteristics, as you can easily go back to the working version (master).
